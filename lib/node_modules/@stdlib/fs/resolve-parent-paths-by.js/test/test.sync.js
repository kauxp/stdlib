'use strict';

var tape = require('tape');
var resolveParentPaths = require('./../lib/sync').default; // Adjust path as needed
var fs = require('@stdlib/fs/exists');
var path = require('path');

// Mock the `exists` function
fs.sync = function () { };

tape('sync: should resolve paths using different modes', function test(t) {
    var originalCwd = process.cwd;
    process.cwd = () => '/base/dir';

    t.test('mode "first"', function (st) {
        fs.sync = (p) => p === path.resolve('/base/dir', 'package.json');

        var result = resolveParentPaths(['package.json'], { mode: 'first' });

        st.deepEqual(result, [path.resolve('/base/dir', 'package.json')], 'should resolve the first path');
        st.end();
    });

    t.test('mode "some"', function (st) {
        fs.sync = (p) => p === path.resolve('/base/dir', 'package.json');

        var result = resolveParentPaths(['package.json'], { mode: 'some' });

        st.deepEqual(result, [path.resolve('/base/dir', 'package.json')], 'should resolve some paths');
        st.end();
    });

    t.test('mode "all"', function (st) {
        fs.sync = (p) => p === path.resolve('/base/dir', 'package.json');

        var result = resolveParentPaths(['package.json'], { mode: 'all' });

        st.deepEqual(result, [path.resolve('/base/dir', 'package.json')], 'should resolve all paths');
        st.end();
    });

    t.test('mode "each"', function (st) {
        fs.sync = (p) => p === path.resolve('/base/dir', 'package.json');

        var result = resolveParentPaths(['package.json'], { mode: 'each' });

        st.deepEqual(result, [path.resolve('/base/dir', 'package.json')], 'should resolve each path');
        st.end();
    });

    process.cwd = originalCwd;
});
